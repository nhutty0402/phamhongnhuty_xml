from lxml import etree
import os

def run_xpath(filename, queries, ns=None):
    print(f"\n------------------- KI·ªÇM TRA: {filename} ------------------------\n")
    path = os.path.join(os.getcwd(), filename)
    tree = etree.parse(path)
    root = tree.getroot()

    for desc, expr in queries:
        print(f"üëâ {desc}")
        print(f"üß≠ XPath: {expr}")
        try:
            if 'nhi·ªÅu h∆°n 1 l·∫ßn' in desc:
                # S·ª¨A: Sum SOLUONG thay v√¨ ch·ªâ count CTHD
                from collections import defaultdict
                dish_count = defaultdict(int)
                cthds = root.xpath('//q:CTHD', namespaces=ns)
                for cthd in cthds:
                    mamon = cthd.xpath('./q:MAMON/text()', namespaces=ns)[0]
                    soluong = int(cthd.xpath('./q:SOLUONG/text()', namespaces=ns)[0])
                    dish_count[mamon] += soluong
                mon_trung = [m for m, c in dish_count.items() if c > 1]
                if not mon_trung:
                    print('‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£.\n')
                    continue
                for m in mon_trung:
                    ten = root.xpath(f"//q:MON[q:MAMON/text()='{m}']/q:TENMON/text()", namespaces=ns)
                    for t in ten:
                        print(' -', t)
                print()
                continue

            result = root.xpath(expr, namespaces=ns)

            # N·∫øu k·∫øt qu·∫£ l√† s·ªë
            if isinstance(result, float):
                print(" -", int(result) if result.is_integer() else result)
                print()
                continue

            # N·∫øu r·ªóng
            if not result:
                print("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£.\n")
                continue

            # In k·∫øt qu·∫£
            for r in result:
                if isinstance(r, etree._Element):
                    print(" -", etree.tostring(r, encoding='unicode', pretty_print=True).strip())
                else:
                    print(" -", r)
            print()

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói: {e}\n")

# Queries s·ª≠a (ch·ªâ 2 query c·∫ßn thay)
queries_sinhvien = [  # Gi·ªØ nguy√™n
    # ... (gi·ªØ nguy√™n nh∆∞ c≈©)
]

queries_quanan = [
    ("L·∫•y t·∫•t c·∫£ b√†n", "//q:BAN"),
    ("L·∫•y t·∫•t c·∫£ nh√¢n vi√™n", "//q:NHANVIEN"),
    ("L·∫•y t·∫•t c·∫£ t√™n m√≥n", "//q:MON/q:TENMON/text()"),
    ("L·∫•y t√™n nh√¢n vi√™n c√≥ m√£ NV00000002", "//q:NHANVIEN[q:MANV/text()='NV00000002']/q:TENNV/text()"),
    ("L·∫•y t√™n nh√¢n vi√™n NV00000003", "//q:NHANVIEN[q:MANV/text()='NV00000003']/q:TENNV/text()"),
    ("L·∫•y s·ªë ƒëi·ªán tho·∫°i nh√¢n vi√™n NV00000003", "//q:NHANVIEN[q:MANV/text()='NV00000003']/q:SDT/text()"),
    ("L·∫•y t√™n m√≥n c√≥ gi√° > 50000", "//q:MON[number(q:GIA/text()) > 50000]/q:TENMON/text()"),  # S·ª¨A: number() v√† /text()
    ("L·∫•y s·ªë b√†n c·ªßa h√≥a ƒë∆°n SOHD=1003", "//q:BAN[q:TENBAN=//q:HOADON[q:SOHD/text()='1003']/q:TENBAN]/q:SOBAN/text()"),  # S·ª¨A: Join l·∫•y SOBAN
    ("L·∫•y t√™n m√≥n c√≥ m√£ MON0000002", "//q:MON[q:MAMON/text()='MON0000002']/q:TENMON/text()"),  # Th√™m /text() cho an to√†n
    ("L·∫•y ng√†y l·∫≠p c·ªßa h√≥a ƒë∆°n SOHD=1003", "//q:HOADON[q:SOHD/text()='1003']/q:NGAYLAP/text()"),
    ("L·∫•y t·∫•t c·∫£ m√£ m√≥n trong h√≥a ƒë∆°n SOHD=1001", "//q:CTHD[q:SOHD/text()='1001']/q:MAMON/text()"),
    ("L·∫•y t√™n m√≥n trong h√≥a ƒë∆°n SOHD=1001", "//q:MON[q:MAMON/text() = //q:CTHD[q:SOHD/text()='1001']/q:MAMON/text()]/q:TENMON/text()"),
    ("L·∫•y t√™n nh√¢n vi√™n l·∫≠p h√≥a ƒë∆°n SOHD=1002", "//q:NHANVIEN[q:MANV/text() = //q:HOADON[q:SOHD/text()='1002']/q:MANV/text()]/q:TENNV/text()"),
    ("ƒê·∫øm s·ªë b√†n", "count(//q:BAN)"),
    ("ƒê·∫øm s·ªë h√≥a ƒë∆°n l·∫≠p b·ªüi NV00000001", "count(//q:HOADON[q:MANV/text()='NV00000001'])"),
    ("L·∫•y t√™n t·∫•t c·∫£ m√≥n c√≥ trong h√≥a ƒë∆°n b√†n s·ªë 2", "//q:MON[q:MAMON/text()=//q:CTHD[q:SOHD/text()=//q:HOADON[q:TENBAN/text()='BAN0000002']/q:SOHD/text()]/q:MAMON/text()]/q:TENMON/text()"),
    ("L·∫•y t·∫•t c·∫£ nh√¢n vi√™n t·ª´ng l·∫≠p h√≥a ƒë∆°n cho b√†n s·ªë 3", "//q:NHANVIEN[q:MANV/text()=//q:HOADON[q:TENBAN/text()='BAN0000003']/q:MANV/text()]/q:TENNV/text()"),
    ("L·∫•y t·∫•t c·∫£ h√≥a ƒë∆°n m√† nh√¢n vi√™n n·ªØ l·∫≠p", "//q:HOADON[q:MANV/text()=//q:NHANVIEN[q:GIOITINH/text()='N·ªØ']/q:MANV/text()]"),
    ("L·∫•y t·∫•t c·∫£ nh√¢n vi√™n t·ª´ng ph·ª•c v·ª• b√†n s·ªë 1", "//q:NHANVIEN[q:MANV/text()=//q:HOADON[q:TENBAN/text()='BAN0000001']/q:MANV/text()]/q:TENNV/text()"),
    ("L·∫•y t·∫•t c·∫£ m√≥n ƒë∆∞·ª£c g·ªçi nhi·ªÅu h∆°n 1 l·∫ßn", ""),  # ƒê√£ s·ª≠a trong h√†m
    ("L·∫•y t√™n b√†n c·ªßa h√≥a ƒë∆°n SOHD=1002", "//q:HOADON[q:SOHD/text()='1002']/q:TENBAN/text()"),
    ("L·∫•y ng√†y l·∫≠p h√≥a ƒë∆°n SOHD=1002", "//q:HOADON[q:SOHD/text()='1002']/q:NGAYLAP/text()")
]

if __name__ == "__main__":
    print(f"üìÇ ƒêang ch·∫°y t·∫°i: {os.getcwd()}")
    run_xpath("sinhvien.xml", queries_sinhvien)
    run_xpath("quanlybanan.xml", queries_quanan, ns={'q': 'http://example.com/quanan'})
    # input("Nh·∫•n Enter ƒë·ªÉ tho√°t...")  # Comment n·∫øu c·∫ßn